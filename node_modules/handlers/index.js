   
var http = require('http');
var url  = require('url');
const net = require('net');
var ipTiva = "192.168.11.166";
var ipbroadCast = "192.168.11.255";
var fs = require('fs');
var jsonfile = require('jsonfile');
var util = require('util');
var nmap = require('node-libnmap');
var PcAulaFuturo  = "../myapp/node_modules/handlers/PcAulaFuturo.json"
var file2 = "../myapp/node_modules/handlers/proyectorsAulaFuturo.json"
var file3 = "../myapp/node_modules/handlers/valueModules.json"
var programModuleFile = "../myapp/node_modules/handlers/programMural.json"
var programECA1File   = "../myapp/node_modules/handlers/programECA1.json"
var programECA2File   = "../myapp/node_modules/handlers/programECA2.json"
var programECA3File   = "../myapp/node_modules/handlers/programECA3.json"
var programECA4File   = "../myapp/node_modules/handlers/programECA4.json"
var schedule = require('node-schedule');
var SSH = require('simple-ssh');
var exec = require('child_process').exec;
var cmd = require('node-cmd');
var busboy = require('connect-busboy'); //middleware for form/file upload
var walk = require('walk');
var os = require('os');
var dgram = require('dgram');

var hostNameServer = os.hostname()
 
var statusPC = '0';

var uploadFile = "../myapp/uploadFiles";

var confirmModuleMural = false;
var confirmModuleECA1  = false;
var confirmModuleECA2  = false;
var confirmModuleECA3  = false;
var confirmModuleECA4  = false;

var cancelTurnOffModuleMural = false;
var cancelTurnOffModuleECA1  = false;
var cancelTurnOffModuleECA2  = false;
var cancelTurnOffModuleECA3  = false;
var cancelTurnOffModuleECA4  = false;

var responseMicro  = false;
var responseMicro2 = false;

//var filename = "../myapp/node_modules/handlers"


// ******************************************************************************
// ********************************* Manejadores ********************************** 
// ******************************************************************************

// var cmd = 'shutdown -s -f ';

// exec(cmd, function(error, stdout, stderr) {
//   // command output is in stdout
// });


 // fs.readFile(programModuleFile, 'utf8', function(err,data){
 //  var auXMural = JSON.parse(data);
 //    for (var i = auXMural.length - 1; i >= 0; i--) {
 //      Things[i]
 //    };

 // });




exports.taskKill = function(req1, res1, next) {

  var options = {
    hostname: '192.168.1.73',
    port: 3001,
    method: 'GET',
    path: "/childKill?data=\\\\ANDRICPC\\programsToShare3\\COMANDO_GUARDAR_PAGINA_WEB.txt"
  }; 
  var req = http.request(options, function(res) {
    res.setEncoding('utf8');

    res.on('data', function(result) {
      })
    });

  req.end()
  res1.end()

};

exports.deleteFile = function(req1, res1, next) {

   cmd.get(
    'del \\programsToShare3'+file+'',
        function(data){
        }
    ); 

  res1.end()

};



exports.sendCmdProjector = function(req, res){
  

  var proyectorName = req.query.proyectorName;
  var onCmd = req.query.onCmd;
  var offCmd = req.query.offCmd;
  var onAckCmd = req.query.onAckCmd;
  var offAckCmd = req.query.offAckCmd;
  var baudRate = req.query.baudRate;
  var newProjector = {
    "proyectorName":  proyectorName,
    "onCmd": onCmd,
    "offCmd": offCmd,
    "onAckCmd": onAckCmd,
    "offAckCmd": offAckCmd,
    "baudRate": baudRate
  }

  fs.readFile(file2, 'utf8', function(err,data){
    aux = JSON.parse(data);
    console.log(data);
    //console.log(typeof(data))

    aux.PROJECTORS[aux.PROJECTORS.length] = newProjector;
      // fs.writeFile(file, util.inspect(aux), 'utf8', function(err){
      fs.writeFile(file2,  JSON.stringify(aux, null, 2), 'utf8', function(err){
      if (err) {
        res.end();
       return console.log(err);
      };
     
      
      res.sendfile('node_modules/handlers/proyectorsAulaFuturo.json', {});
      console.log("Projector guardado!");
      });
    
  });


};

exports.downloadFiles = function(req, res){
var fileToDownload = req.query.file;
var path = '../myapp/programsToShare3/'+fileToDownload;

res.download(path);

};



exports.startFile = function(req1, res1, next) {
  var fileName         = req1.query.nameFile;
  var moduloToOpenFile = req1.query.modulo;
  var pcToSendFile;
  var dirIP;
  var controlOnPc = '0';
  var control = false;
  var waitTime = 5000; //60000 = 60 segundos

  // var auxfilesName = "";
  // for (var i = 0; i < fileName.length; i++) {
  //   if(fileName[i] == '*'){
  //     auxfilesName += " ";
  //   }else{
  //     auxfilesName += fileName[i];
  //   }

  // };

  console.log('Archivo:     ',auxfilesName)
  console.log('Ejecutar en: ',moduloToOpenFile)

  fs.readFile(file3, 'utf8', function(err,data){
    fs.readFile(PcAulaFuturo, 'utf8', function(err,data2){

      var whichModule = JSON.parse(data);
      var whichPc     = JSON.parse(data2);

      for (var i = whichModule.Values.length - 1; i >= 0; i--) {
        if (whichModule.Values[i].modulo == moduloToOpenFile)
          pcToSendFile = whichModule.Values[i].pc
      };

      for (var j = whichPc.PC.length - 1; j >= 0; j--) {
        if (whichPc.PC[j].pcName == pcToSendFile){
          console.log('Pc:          ',pcToSendFile)
          dirIP = whichPc.PC[j].IP;
          sendCmdToSartFile(dirIP, fileName);
        }
      };
    }); 
  });  
  
  res1.end()

};

exports.prueba2 = function(req1, res1, next) {
console.log("Hi");
  var controlOnPc = '0';
  var control = false;
  var waitTime = 5000; //60000 = 60 segundos
  
  res1.setHeader('Content-Type', 'text/plain');
  res1.setHeader('X-Foo', 'bar');
  res1.writeHead(200, {'Content-Type': 'text/plain'});

  var options = {
    hostname: "192.168.1.73",
    port: 3001,
    method: 'GET',
    path: "/finish?data=wordpad.exe"
  }; 
  var req = http.request(options, function(res) {
    res.setEncoding('utf8');

    res.on('data', function(result) {
          console.log(result);
 
      })
    });

    req.on('error', function(e) {
      console.log('ERROR: ' + e.message);

    });

  req.end();
  res1.end();
    
};

exports.shutdownMyself = function(req1, res1, next) {
console.log("Hi");
  var controlOnPc = '0';
  var control = false;
  var waitTime = 5000; //60000 = 60 segundos
  

  res1.setHeader('Content-Type', 'text/plain');
  res1.setHeader('X-Foo', 'bar');
  res1.writeHead(200, {'Content-Type': 'text/plain'});

  var options = {
    hostname: "192.168.1.73",
    port: 3001,
    method: 'GET',
    path: "/shutdownMyself"
  }; 
  var req = http.request(options, function(res) {
    res.setEncoding('utf8');

    res.on('data', function(result) {
          console.log(result);
 
      })
    });

    req.on('error', function(e) {
      console.log('ERROR: ' + e.message);
 
    });

  req.end();
  res1.end();
    
};

exports.checkPcOn = function(req1, res1) {
  //Dell tarda 30 segundos en responder despues de encendida

  // var IP = req1.query.IP;
  var IP     = req1.query.IP;
  var pcName = req1.query.pcName;
  var cnt = 0;

  var controlOnPc = '0';
  var control = false;
  var waitTime = 60000*2; //60000 = 60 segundos
  console.log("IP: ",IP);
  console.log("PC: ",pcName);

  var options = {
    hostname: IP,
    port: 13,
    method: 'GET',
    path: "/"
  }; 
  var req = http.request(options, function(res) {
    res.setEncoding('utf8');

    res.on('data', function(result) {
          console.log(result);
          controlOnPc = '1';
          res1.end(controlOnPc);
      })
    });

  req.on('error', function(e) {
    console.log('ERROR: ' + e.message);
    //Aprox. al minuto con 16 segundos se genera el ERROR: connect ETIMEDOUT 192.168.11.130:13
    if (e.message == "connect ECONNREFUSED "+IP+":13"){
      control = true;
      console.log('PC encendida!')
      controlOnPc = '1';
      req.end();
      res1.end(controlOnPc);
    }else if(e.message == "connect ETIMEDOUT "+IP+":13"){
      console.log('PC NO encendida!');
      controlOnPc = '0';
      req.end();
      res1.end(controlOnPc);
    }else{
      console.log('PC NO encendida!');
      controlOnPc = '0';
      req.end();
      res1.end(controlOnPc);
    };
  });

    // setTimeout(function(){
    //   req.end();
    //   res1.end(controlOnPc);
    // },waitTime); 

  req.end();
};


//***************** Terminar
exports.checkPcOff = function(req1, res1, next) {
  var IP     = req1.query.IP;
  var pcName = req1.query.pcName;

  cmd.get(
    'ping -n 2 '+IP+'',
    function(data){
      console.log("");
      console.log("Comando para apagar enviado");
      console.log("Response: ");
      //console.log(data);
      //console.log("");
      var x = data.split("\n");
      console.log("");
      console.log("x = ", x);
      for (var i = x.length - 1; i >= 0; i--) {
        if(x[i] == '--- '+IP+' ping statistics ---'){
          if (x[i+1] == '1 packets transmitted, 0 packets received, 100.0% packet loss'){
            res1.end('1');
          }else{
            res1.end('0');
          }
        };
      };
      res1.end('0');
  }
);  

};

var timeOut;
exports.checkPcOn2 = function(req1, res1) {
  var IP     = req1.query.IP;
  var pcName = req1.query.pcName;
  timeOut = true;

  var options = {
    hostname: IP,
    port: 3001,
    method: 'GET',
    path: "/imHereOn"
  }; 

  var req = http.request(options, function(res) {
    res.setEncoding('utf8');

    res.on('data', function(result) {
      console.log(pcName+": ",result)

      if (result == "on") 
        timeOut = false;

      req.end();
    });
  });

  req.on('error', function(e) {
    timeOut = true;
    req.end();
  });
//console.log()
    // setTimeout(function(){ 
    //   if (timeOut){
    //     res1.end(pcName+"_off");
    //   }else{
    //     res1.end(pcName+"_on");

    //   }  
    // },100); 

  
};


var filesX = [];
exports.readContentFile = function(req, res, next) {
  filesX = [];

  var walker = walk.walk('..\\myapp\\programsToShare3');

  walker.on('file',function(root, stat, next){
    filesX.push(stat.name);
    next();
  });

  walker.on('end', function(){
    var filesToClient = "";
    console.log("Archivos: ", filesX)
    for (var i = filesX.length - 1; i >= 0; i--) {
      filesToClient += filesX[i] + ":";

      if (i == 0)
        res.end(filesToClient);
    };
    
  });

};


exports.whatIsYourIP = function(req, res, next) {

  var interfaces = os.networkInterfaces();
  var addresses = [];

  for(var k in interfaces){
    for(var k2 in interfaces[k]){
      var address = interfaces[k][k2];
      if (address.family == 'IPv4' && !address.internal) {
        addresses.push(address.address);

      };
    };
  };
  res.end(addresses[0])
};

exports.welcome = function(req, res, next) {
  res.sendfile('views/index.html', {});
};

exports.LoadButtonsPC = function(req, res, next) {
  res.sendfile('node_modules/handlers/PcAulaFuturo.json', {});
};

exports.getValueForModules = function(req, res, next) {
  res.sendfile('node_modules/handlers/valueModules.json', {});
};

exports.getValueForProjectors = function(req, res, next) {
  res.sendfile('node_modules/handlers/proyectorsAulaFuturo.json', {});
};

exports.cancelMuralEca = function(req, res, next) {
  cancelTurnOffModuleMural = true;
  cancelTurnOffModuleECA1  = true;
  cancelTurnOffModuleECA2  = true;
  cancelTurnOffModuleECA3  = true;
  cancelTurnOffModuleECA4  = true;  

  console.log("Cancel Off")
  res.end();
};

exports.programMuralEcaConfirm = function(req, res, next) {
  var response = "";
  var cnt = 0;
  var hayModuleOn = false;

  if (confirmModuleMural) {
    response += "Mural_on-"
    hayModuleOn = true;
  }
  if(confirmModuleECA1){
    response += "ECA1_on-"
    hayModuleOn = true;
  }
  if(confirmModuleECA2){
    response += "ECA2_on-"
    hayModuleOn = true;
  }
  if(confirmModuleECA3){
    response += "ECA3_on-"
    hayModuleOn = true;
  }
  if(confirmModuleECA4){
    response += "ECA4_on-"
    hayModuleOn = true;
  }

  res.end(response)
};

exports.programMuralEca = function(req, res, next) {
  var modulo = req.query.moduloP;
  var date   = req.query.date;
  var time   = req.query.time;

  var dateParam = date.split("-");
  var timeParam = time.split(":");

  var aux, aux2, x, y, Mural, ECA1, ECA2, ECA3, ECA4;

  console.log("Programar módulo: ",modulo)
  console.log("Fecha:            ", date);
  console.log("Horario:          ", time);

  //var ruleM = new schedule.RecurrenceRule();
    
  var year     = Number(dateParam[0]);
  var month    = Number(dateParam[1])-1;
  var dayMonth = Number(dateParam[2]);
  var hour     = Number(timeParam[0]);
  var minute   = Number(timeParam[1]);

  cancelTurnOffModuleMural = false;
  cancelTurnOffModuleECA1  = false;
  cancelTurnOffModuleECA2  = false;
  cancelTurnOffModuleECA3  = false;
  cancelTurnOffModuleECA4  = false;
  confirmModuleMural       = false;

  // if (date == "" || time == "") {
  //   res.end("failNoDateTime");
  // };


  var ruleM = new schedule.RecurrenceRule();
  //ruleM.year        = year;
  ruleM.month       = month;
  ruleM.dayOfMonth  = dayMonth;
  ruleM.hour        = hour;
  ruleM.minute      = minute;
//******************************************************************************************
  if (modulo == "Mural") {
    fs.readFile(programModuleFile, 'utf8', function(err,data){
      var auxMural           = JSON.parse(data);
      var numberProgramMural = auxMural.programMural.length+1;
     
      var jP = schedule.scheduleJob(ruleM, function(){
        console.log("hi")
        fs.readFile(file3, 'utf8', function(err,data){
          fs.readFile(programModuleFile, 'utf8', function(err,data2){
            aux  = JSON.parse(data);
            aux2 = JSON.parse(data2);

            for (var i = aux2.programMural.length - 1; i >= 0; i--) {
              if(aux2.programMural[i].objecto.name == jP.name){
                                   x = aux2.programMural[0]; 
                aux2.programMural[0] = aux2.programMural[i];
                aux2.programMural[i] = x;
                aux2.programMural.splice(0,1);
              }
            };

            fs.writeFile(programModuleFile,  JSON.stringify(aux2, null, 2), 'utf8', function(err){
              if (err) {
               return console.log(err);
              };
            });

            Mural = aux.Values[0].modulo+"_"+aux.Values[0].proyector+"_"+aux.Values[0].pc+"_"+aux.Values[0].puerto
            sendCmdOnToUcProgram(Mural);

            confirmModuleMural = true;

            setTimeout(function(){ 
              if (!cancelTurnOffModuleMural) {
                console.log("Apagar modulo Mural");
              };
                cancelTurnOffModuleMural = false;
                confirmModuleMural = false;

            },1000*60); 

          });
        });
      });

      var newProgram = {
        "nameProgram":  "muralP"+numberProgramMural,
        "date": date,
        "time": time,
        "objecto":jP
      }
      
      auxMural.programMural[auxMural.programMural.length] = newProgram;
      fs.writeFile(programModuleFile,  JSON.stringify(auxMural, null, 2), 'utf8', function(err){
        if (err) {
         return console.log(err);
        };
      });
    });
  res.end("ok");
//******************************************************************************************
  }else if (modulo == "Eca1") {

   fs.readFile(programECA1File, 'utf8', function(err,data){
      var auxECA1           = JSON.parse(data);
      var numberProgramECA1 = auxECA1.programECA1.length+1;

      var Eca1P = schedule.scheduleJob(ruleM, function(){
        fs.readFile(file3, 'utf8', function(err,data){
          fs.readFile(programECA1File, 'utf8', function(err,data2){
            aux  = JSON.parse(data);
            aux2 = JSON.parse(data2);

            for (var i = aux2.programECA1.length - 1; i >= 0; i--) {
              if(aux2.programECA1[i].objecto.name == Eca1P.name){
                                  x = aux2.programECA1[0]; 
                aux2.programECA1[0] = aux2.programECA1[i];
                aux2.programECA1[i] = x;
                aux2.programECA1.splice(0,1);
              }
            };

            fs.writeFile(programECA1File,  JSON.stringify(aux2, null, 2), 'utf8', function(err){
              if (err) {
               return console.log(err);
              };
            });
            
            ECA1  = aux.Values[1].modulo+"_"+aux.Values[1].proyector+"_"+aux.Values[1].pc+"_"+aux.Values[1].puerto
            sendCmdOnToUcProgram(ECA1);

            confirmModuleECA1 = true;

            setTimeout(function(){ 
              if (!cancelTurnOffModuleECA1) {
                console.log("Apagar modulo ECA1");
                
              };

              cancelTurnOffModuleECA1  = false;

              confirmModuleECA1 = false;
            },1000*60); 
          
          });
        });
      });

      var newProgram = {
        "nameProgram":  "Eca1P"+numberProgramECA1,
        "date": date,
        "time": time,
        "objecto":Eca1P
      }
      
      auxECA1.programECA1[auxECA1.programECA1.length] = newProgram;
      fs.writeFile(programECA1File,  JSON.stringify(auxECA1, null, 2), 'utf8', function(err){
        if (err) {
         return console.log(err);
        };
      });
    });
  res.end("ok");
//******************************************************************************************
  }else if (modulo == "Eca2") {
    fs.readFile(programECA2File, 'utf8', function(err,data){
      var auxECA2           = JSON.parse(data);
      var numberProgramECA2 = auxECA2.programECA2.length+1;

      var Eca2P = schedule.scheduleJob(ruleM, function(){

        fs.readFile(file3, 'utf8', function(err,data){
          fs.readFile(programECA2File, 'utf8', function(err,data2){
            aux  = JSON.parse(data);
            aux2 = JSON.parse(data2);

            for (var i = aux2.programECA2.length - 1; i >= 0; i--) {
              if(aux2.programECA2[i].objecto.name == Eca2P.name){
                                  x = aux2.programECA2[0]; 
                aux2.programECA2[0] = aux2.programECA2[i];
                aux2.programECA2[i] = x;
                aux2.programECA2.splice(0,1);
              }
            };

            fs.writeFile(programECA2File,  JSON.stringify(aux2, null, 2), 'utf8', function(err){
              if (err) {
               return console.log(err);
              };
            });

            ECA2  = aux.Values[2].modulo+"_"+aux.Values[2].proyector+"_"+aux.Values[2].pc+"_"+aux.Values[2].puerto
            sendCmdOnToUcProgram(ECA2);

            confirmModuleECA2 = true;

            setTimeout(function(){ 
              if (!cancelTurnOffModuleECA2) {
                console.log("Apagar modulo ECA2");
                
              };

              cancelTurnOffModuleECA2  = false;

              confirmModuleECA2 = false;
            },1000*60); 

          });
        });
      });

      var newProgram = {
        "nameProgram":  "Eca2P"+numberProgramECA2,
        "date": date,
        "time": time,
        "objecto":Eca2P
      }
      
      auxECA2.programECA2[auxECA2.programECA2.length] = newProgram;
      fs.writeFile(programECA2File,  JSON.stringify(auxECA2, null, 2), 'utf8', function(err){
        if (err) {
         return console.log(err);
        };
      });
    });
  res.end("ok");
//******************************************************************************************
  }else if (modulo == "Eca3") {
    fs.readFile(programECA3File, 'utf8', function(err,data){
      var auxECA3           = JSON.parse(data);
      var numberProgramECA3 = auxECA3.programECA3.length+1;

      var Eca3P = schedule.scheduleJob(ruleM, function(){
        fs.readFile(file3, 'utf8', function(err,data){
          fs.readFile(programECA3File, 'utf8', function(err,data2){
            aux  = JSON.parse(data);
            aux2 = JSON.parse(data2);

            for (var i = aux2.programECA3.length - 1; i >= 0; i--) {
              if(aux2.programECA3[i].objecto.name == Eca3P.name){
                                  x = aux2.programECA3[0]; 
                aux2.programECA3[0] = aux2.programECA3[i];
                aux2.programECA3[i] = x;
                aux2.programECA3.splice(0,1);
              }
            };

            fs.writeFile(programECA3File,  JSON.stringify(aux2, null, 2), 'utf8', function(err){
              if (err) {
               return console.log(err);
              };
            });
          
            ECA3  = aux.Values[3].modulo+"_"+aux.Values[3].proyector+"_"+aux.Values[3].pc+"_"+aux.Values[3].puerto
            sendCmdOnToUcProgram(ECA3);

            confirmModuleECA3 = true;

            setTimeout(function(){ 
              if (!cancelTurnOffModuleECA3) {
                console.log("Apagar modulo ECA3");
                
              };

              cancelTurnOffModuleECA3  = false;
 
              confirmModuleECA3 = false;
            },1000*60); 

          });
        });
      });

      var newProgram = {
        "nameProgram":  "Eca3P"+numberProgramECA3,
        "date": date,
        "time": time,
        "objecto":Eca3P
      }
      
      auxECA3.programECA3[auxECA3.programECA3.length] = newProgram;
      fs.writeFile(programECA3File,  JSON.stringify(auxECA3, null, 2), 'utf8', function(err){
        if (err) {
         return console.log(err);
        };
      });

    });
  res.end("ok");
//******************************************************************************************
  }else if (modulo == "Eca4"){
    fs.readFile(programECA4File, 'utf8', function(err,data){
      var auxECA4           = JSON.parse(data);
      var numberProgramECA4 = auxECA4.programECA4.length+1;

      var Eca4P = schedule.scheduleJob(ruleM, function(){
        fs.readFile(file3, 'utf8', function(err,data){
          fs.readFile(programECA4File, 'utf8', function(err,data2){
            aux  = JSON.parse(data);
            aux2 = JSON.parse(data2);

            for (var i = aux2.programECA4.length - 1; i >= 0; i--) {
              if(aux2.programECA4[i].objecto.name == Eca4P.name){
                                  x = aux2.programECA4[0]; 
                aux2.programECA4[0] = aux2.programECA4[i];
                aux2.programECA4[i] = x;
                aux2.programECA4.splice(0,1);
              }
            };

            fs.writeFile(programECA4File,  JSON.stringify(aux2, null, 2), 'utf8', function(err){
              if (err) {
               return console.log(err);
              };
            });            
          
            ECA4  = aux.Values[4].modulo+"_"+aux.Values[4].proyector+"_"+aux.Values[4].pc+"_"+aux.Values[4].puerto
            sendCmdOnToUcProgram(ECA4);

            confirmModuleECA4 = true;

            setTimeout(function(){ 
              if (!cancelTurnOffModuleECA4) {
                console.log("Apagar modulo ECA4");
                
              };

              cancelTurnOffModuleECA4  = false;
              confirmModuleECA4 = false;
            },1000*60); 

          });
        });
      });

      var newProgram = {
        "nameProgram":  "Eca4P"+numberProgramECA4,
        "date": date,
        "time": time,
        "objecto":Eca4P
      }
      
      auxECA4.programECA4[auxECA4.programECA4.length] = newProgram;
      fs.writeFile(programECA4File,  JSON.stringify(auxECA4, null, 2), 'utf8', function(err){
        if (err) {
         return console.log(err);
        };
      });
    });
  res.end("ok");
//******************************************************************************************
  }else{
    console.log("Error al programar modulo!")
    res.end("fail");
  }
};

exports.configureMuralEca = function(req, res) {
  var modulo    = req.query.modulo;
  var projector = req.query.projector;
  var pc        = req.query.pc;
  var puerto    = req.query.puerto;
  var aux;
  var changePort;
  var changePort2;
  var controlDeleteData = false;
  var controlPort = false; 

  res.setHeader('Content-Type', 'text/plain');
  res.setHeader('X-Foo', 'bar');
  res.writeHead(200, {'Content-Type': 'text/plain'});

  fs.readFile(file3, 'utf8', function(err,data){
    aux = JSON.parse(data);

    for (var i = aux.Values.length - 1; i >= 0; i--) {
      if (aux.Values[i].puerto == puerto){
        changePort  = i;
        controlPort = true;   
      }
    };

    for (var i = aux.Values.length - 1; i >= 0; i--) {
      if (aux.Values[i].modulo == modulo){
        changePort2             = aux.Values[i].puerto;
        aux.Values[i].proyector = projector;
        aux.Values[i].pc        = pc;  
        aux.Values[i].puerto    = puerto;  

        controlDeleteData = true;
      }
    };

    if (controlPort) 
      aux.Values[changePort].puerto = changePort2;
    
    if (controlDeleteData) {
      // fs.writeFile(file, util.inspect(aux), 'utf8', function(err){
      fs.writeFile(file3,  JSON.stringify(aux, null, 2), 'utf8', function(err){
      if (err) {
       return console.log(err);
      };
      console.log("Datos config correctamente!");
      res.end(modulo+"_1");
      });
    }else{
      console.log("Error al configurar datos");
      res.end(modulo+"_0");
    }
  });

};

exports.sendCmdOnToUc = function(req1, res1) {
  //req1,res1 --> objetos que contiene el request y respuesta para cliente
  //req,res   --> objetos que contiene el request y respuesta que se envía al uC
  console.log("");
  

  var module, projectorName, pcName, statusProjector, puerto;
  var auxData;
  var auxConvertHexOn, auxConvertHexOff;
  var auxConvertHexOnAck, auxConvertHexOffAck;
  var convertHexCmdFormatOn, convertHexCmdFormatOff;
  var convertHexCmdFormatOnAck, convertHexCmdFormatOffAck;
  var statusPCarray = [];
  var response = "";
  var currentStatus = "";

  var Mural = req1.query.Mural;
  var ECA1  = req1.query.ECA1;
  var ECA2  = req1.query.ECA2;
  var ECA3  = req1.query.ECA3;
  var ECA4  = req1.query.ECA4;

  var auxArray = [Mural,ECA1,ECA2,ECA3,ECA4];
  var url = "";
  var auxConvertHexOn     = "";
  var auxConvertHexOnAck  = "";
  var auxConvertHexOff    = "";
  var auxConvertHexOffAck = "";

  var waitTime = 1000*10;

  responseMicro = false;

  for (var i = auxArray.length - 1; i >= 0; i--) {
    if(auxArray[i] != undefined)
      var muralECA = auxArray[i];
  };

  var dataSatus   = muralECA.split('_');
  module          = dataSatus[0];
  projectorName   = dataSatus[1];
  pcName          = dataSatus[2];
  puerto          = dataSatus[3];

  console.log("*** Encender módulo "+ module +" ***");
  console.log("");
  console.log("Value:      ",muralECA);
  console.log("Modulo:     ",module);
  console.log("Proyector:  ",projectorName);
  console.log("PC:         ",pcName);
  console.log("Puerto:     ",puerto);
 
  fs.readFile(file2, 'utf8', function(err,data){
    auxData = JSON.parse(data);

    for (var j = auxData.PROJECTORS.length - 1; j >= 0; j--) {
      if (auxData.PROJECTORS[j].proyectorName == projectorName) {
        convertHexCmdFormatOn     = auxData.PROJECTORS[j].onCmd.split(",");
        convertHexCmdFormatOnAck  = auxData.PROJECTORS[j].onAckCmd.split(",");
        convertHexCmdFormatOff    = auxData.PROJECTORS[j].offCmd.split(",");
        convertHexCmdFormatOffAck = auxData.PROJECTORS[j].offAckCmd.split(",");
        baudRate                  = auxData.PROJECTORS[j].baudRate;
      };
    };

    console.log("");

    for (var k = 0; k < convertHexCmdFormatOn.length; k++)
      auxConvertHexOn += convertHexCmdFormatOn[k];
    for (var k = 0; k < convertHexCmdFormatOnAck.length ; k++)
      auxConvertHexOnAck += convertHexCmdFormatOnAck[k];
    
    url = "/puerto"+puerto+"?cmd="+auxConvertHexOn+"&baudRate="+baudRate+"+&Ack="+auxConvertHexOnAck+"*";
    console.log(""+module+"OnCmd:    ",auxConvertHexOn);
    console.log(""+module+"OnCmdAck: ",auxConvertHexOnAck);
    console.log(""+module+"Url:      ",url);

    console.log("");
    //console.log(url)

    var options = {
      hostname: ipTiva,
      port: 80,
      method: 'GET',
      path: url
    };

    var req = http.request(options, function(res) {
      res.setEncoding('utf8');
      res.on('data', function(result) {
        // res1.setHeader('Content-Type', 'text/plain');
        // res1.setHeader('X-Foo', 'bar');
        // res1.writeHead(200, {'Content-Type': 'text/plain'});
        console.log(""+module+"Response: ",result);
        responseMicro = true;

        //Formato de respuesta = [modulo,proyector,pc,estadoActual,puerto,respuestaMicro, envíoPaquetesUDP]
        //console.log(result);
        if (result != '1'){
          console.log("Error de encendido de proyector");
          response = module+"_"+projectorName+"_"+pcName+"_"+puerto+"_"+result+"_"+statusPC;
          req.end("ok");
          res1.end(response);
          
        }else{
          //Encender PC:  envío de paquetes UDP por medio del protocolo Wake On Lan
          turnOnPc(pcName);
          console.log("Success: Proyector encendido");
          setTimeout(function(){ 

            response = module+"_"+projectorName+"_"+pcName+"_"+puerto+"_"+result+"_"+statusPC;
            req.end("ok");
            res1.end(response);
          },100); 
        };

      })
    });
  
    //Si no está conectado a la red el uC (dispositivo con puertos RS232)
    //Esperamos a los más 15 segundos y regresamos respuesta al cliente
    //Indicando que el dispositivo está fuera de la red:
    req.on('error', function(e) {
      console.log('ERROR: ' + e.message);
      response = module+"_"+projectorName+"_"+pcName+"_"+puerto+"_3_"+statusPC;
      req.end("ok");
      res1.end(response);
    });

    setTimeout(function(){ 
      if (!responseMicro) {
        console.log('Error: TimeOut 15 s!')

        //Prueba - Borrar
        //********************************
        //turnOnPc(pcName);
        // setTimeout(function(){ 
        //   // res1.setHeader('Content-Type', 'text/plain');
        //   // res1.setHeader('X-Foo', 'bar');
        //   // res1.writeHead(200, {'Content-Type': 'text/plain'});
        //   response = module+"_"+projectorName+"_"+pcName+"_"+puerto+"_3_"+statusPC;
        //   req.end("ok");
        //   res1.end(response);
        // },100); 
        //********************************

        response = module+"_"+projectorName+"_"+pcName+"_"+puerto+"_3_"+statusPC;
        req.end("ok");
        res1.end(response);
      };

    },waitTime); 

    
    req.end("ok");
  });
};

exports.sendCmdOffToUc = function(req1, res1) {
  //req1,res1 --> objetos que contiene el request y respuesta para cliente
  //req,res   --> objetos que contiene el request y respuesta que se envía al uC
  
  var module, projectorName, pcName, statusProjector, puerto;
  var auxData;
  var auxConvertHexOff;
  var auxConvertHexOffAck;
  var convertHexCmdFormatOff;
  var convertHexCmdFormatOffAck;
  var statusPCarray = [];
  var response = "";
  var currentStatus = "";

  var Mural = req1.query.Mural;
  var ECA1  = req1.query.ECA1;
  var ECA2  = req1.query.ECA2;
  var ECA3  = req1.query.ECA3;
  var ECA4  = req1.query.ECA4;

  var auxArray = [Mural,ECA1,ECA2,ECA3,ECA4];
  var url = "";
  var auxConvertHexOn     = "";
  var auxConvertHexOnAck  = "";
  var auxConvertHexOff    = "";
  var auxConvertHexOffAck = "";

  var waitTime = 1000*10;

  for (var i = auxArray.length - 1; i >= 0; i--) {
    if(auxArray[i] != undefined)
      var muralECA = auxArray[i];
  };


  var dataSatus   = muralECA.split('_');
  module          = dataSatus[0];
  projectorName   = dataSatus[1];
  pcName          = dataSatus[2];
  puerto          = dataSatus[3];

  console.log("");
  console.log("*** Apagar módulo "+ module +" ***");
  console.log("");

  console.log("Value:          ",muralECA);
  console.log("Modulo:         ",module);
  console.log("Proyector:      ",projectorName);
  console.log("PC:             ",pcName);
  console.log("Puerto:         ",puerto);
 
  fs.readFile(file2, 'utf8', function(err,data){
    auxData = JSON.parse(data);

    for (var j = auxData.PROJECTORS.length - 1; j >= 0; j--) {
      if (auxData.PROJECTORS[j].proyectorName == projectorName) {
        convertHexCmdFormatOn     = auxData.PROJECTORS[j].onCmd.split(",");
        convertHexCmdFormatOnAck  = auxData.PROJECTORS[j].onAckCmd.split(",");
        convertHexCmdFormatOff    = auxData.PROJECTORS[j].offCmd.split(",");
        convertHexCmdFormatOffAck = auxData.PROJECTORS[j].offAckCmd.split(",");
        baudRate                  = auxData.PROJECTORS[j].baudRate;
      };
    };

    console.log("");

    for (var k = 0; k < convertHexCmdFormatOff.length ; k++)
      auxConvertHexOff += convertHexCmdFormatOff[k];
    for (var k = 0; k < convertHexCmdFormatOffAck.length ; k++)
      auxConvertHexOffAck += convertHexCmdFormatOffAck[k];
    url = "/puerto"+puerto+"?cmd="+auxConvertHexOff+"&baudRate="+baudRate+"+&Ack="+auxConvertHexOffAck+"*";
    console.log(""+module+"OffCmd:    ",auxConvertHexOff);
    console.log(""+module+"OffCmdAck: ",auxConvertHexOffAck);
    console.log(""+module+"Url:       ",url);

    console.log("");
    // var statusPC = turnOnPc(pcName);

    var options = {
      hostname: ipTiva,
      port: 80,
      method: 'GET',
      path: url
    };

    var req = http.request(options, function(res) {
      res.setEncoding('utf8');
      res.on('data', function(result) {
        console.log(""+module+"Response: ",result);
        //Formato de respuesta = [modulo,proyector,pc,puerto,respuestaMicro]
        console.log(result);
        if (result != '1'){
          console.log("Error");
          response = ""+module+"_"+projectorName+"_"+pcName+"_"+puerto;
          
        }else{
          TurnOffPC(pcName);
          console.log("Success");
          response = ""+module+"_"+projectorName+"_"+pcName+"_"+puerto;
        };
        response = response+"_"+result;
        res1.setHeader('Content-Type', 'text/plain');
        res1.setHeader('X-Foo', 'bar');
        res1.writeHead(200, {'Content-Type': 'text/plain'});
        res1.end(response);
      })
    });

    //Si no está conectado a la red el uC (dispositivo con puertos RS232)
    //Esperamos a los más 15 segundos y regresamos respuesta al cliente
    //Indicando que el dispositivo está fuera de la red:
    req.on('error', function(e) {
      console.log('ERROR: ' + e.message);
      response = ""+module+"_"+projectorName+"_"+pcName+"_"+puerto+"_3";
      console.log('Error!')
      req.end("ok");
      res1.end(response);
    });

    setTimeout(function(){ 
      response = ""+module+"_"+projectorName+"_"+pcName+"_"+puerto+"_3";
      console.log('Error: TimeOut 15 s!')
      req.end("ok");
      res1.end(response);
    },waitTime); 


    
    req.end("ok");
  });
};


exports.TurnOnPC = function(req, res) {
//00:22:19:2A:96:59
  var namePC = req.query.namePC;
  var macAddr = req.query.target;
  var waitTime = 100;

  turnOnPc(namePC);
  
  setTimeout(function(){ 
    console.log(statusPC);
    res.setHeader('X-Foo', 'bar');
    res.writeHead(200, {'Content-Type': 'text/plain'});
    res.end(namePC+"_"+statusPC);
  },waitTime); 

};

exports.TurnOffPC = function(req, res) {
  
  var pcName = req.query.pcName;

  TurnOffPC(pcName);
  console.log("Apagar ", pcName)

  res.end("1");


  // console.log("IP: ",IP);
  // console.log("PC: ",pcName);
  // console.log('shutdown -s -f -t 0 -m \\\\'+IP+'');

  // cmd.get(
  //   'shutdown -s -f -t 0 -m \\\\'+IP+'',
  //   function(data){
  //     if (err){  
  //       res.setHeader('X-Foo', 'bar');
  //       res.writeHead(200, {'Content-Type': 'text/plain'});
  //       res.end(status);
  //       throw err
  //       res.end("0");
  //     };
  //     console.log("Comando para apagar enviado");
  //     res.setHeader('X-Foo', 'bar');
  //     res.writeHead(200, {'Content-Type': 'text/plain'});
  //     res.end("1");
  //   }
  // );
}

exports.writeDataPC = function(req, res) {
  var controlWrtieData = true;
  var aux;
  var pcName  = req.query.name;
  var macAddr = req.query.MacA;
  var dirIP   = req.query.IP;
  var newPC = {
    "pcName":  pcName,
    "macAddr": macAddr,
    "IP": dirIP
  }

  res.setHeader('Content-Type', 'text/plain');
  res.setHeader('X-Foo', 'bar');
  res.writeHead(200, {'Content-Type': 'text/plain'});

  // fs.readFile("../myapp/node_modules/handlers/PcAulaFuturo.txt", 'utf8', function(err,data){
  fs.readFile(PcAulaFuturo, 'utf8', function(err,data){
    aux = JSON.parse(data);
    //console.log(data);
    //console.log(typeof(data))

    for (var i = aux.PC.length - 1; i >= 0; i--) {
      if ((aux.PC[i].pcName == pcName) || (aux.PC[i].macAddr == macAddr) || (aux.PC[i].dirIP == dirIP)){
        controlWrtieData = false;

      }
    };
    
    if (controlWrtieData) {
      aux.PC[aux.PC.length] = newPC;
      // fs.writeFile(file, util.inspect(aux), 'utf8', function(err){
      fs.writeFile(PcAulaFuturo,  JSON.stringify(aux, null, 2), 'utf8', function(err){
      if (err) {
       return console.log(err);
      };
      console.log("PC guardada!");
      res.end('ok');
      });
    }else{
      console.log("PC existente!");
      res.end('fail');
    }
  });

}

exports.deleteDataPC = function(req, res, next) {

  var pcName1  = req.query.pcName;
  var controlDeleteData = false;
  var aux, aux2;

  res.setHeader('Content-Type', 'text/plain');
  res.setHeader('X-Foo', 'bar');
  res.writeHead(200, {'Content-Type': 'text/plain'});

  fs.readFile(PcAulaFuturo, 'utf8', function(err,data){
    aux = JSON.parse(data);

    for (var i = aux.PC.length - 1; i >= 0; i--) {
      if (aux.PC[i].pcName == pcName1){
        aux2      = aux.PC[0]; 
        aux.PC[0] = aux.PC[i].pcName;
        aux.PC[i] = aux2;

        controlDeleteData = true;
        aux.PC.splice(0,1);
      }
    };
    
    if (controlDeleteData) {
      // fs.writeFile(file, util.inspect(aux), 'utf8', function(err){
      fs.writeFile(PcAulaFuturo,  JSON.stringify(aux, null, 2), 'utf8', function(err){
      if (err) {
       return console.log(err);
      };
      console.log(pcName1,"PC borrada!");
      res.end(pcName1+'_1');
      });
    }else{
      console.log(pcName1,"PC No borrada!");
      res.end(pcName1+'_0');
    }
  });
  //res.redirect('/#ConfigureComputers');
};

exports.puerto4 = function(req1, res1) {

// data: {cmd:'0200000000020304', baudRate:'38400+',Ack:'220001100033*'}
// "/puerto4?cmd=0200000000020304&baudRate=115200+&Ack=220001100033*";

      var cmd       = req1.query.cmd;
      var baudRate  = req1.query.baudRate;
      var Ack       = req1.query.Ack;

      var options = {
        hostname: ipTiva,
        port: 80,
        method: 'GET',
        path: "/puerto4?cmd="+cmd+"&baudRate="+baudRate+"&Ack="+Ack+""
      };

      var req = http.request(options, function(res) {
        res.setEncoding('utf8');
        res.on('data', function(result) {
          console.log(result);
          res1.setHeader('Content-Type', 'text/plain');
          res1.setHeader('X-Foo', 'bar');
          res1.writeHead(200, {'Content-Type': 'text/plain'});
          res1.end(result);
        })
      });

      req.on('error', function(e) {
        console.log('ERROR: ' + e.message);
      });
    
  req.end("ok");
};


// ******************************************************************************
// ********************************* Funciones ********************************** 
// ******************************************************************************

function objToString (obj) {
    var str = '';
    for (var p in obj) {
        if (obj.hasOwnProperty(p)) {
            str += p + '::' + obj[p] + '\n';
        }
    }
    return str;
}

// var year       = 2016;
// var month      =   03;
// var dayOfMonth =   23;
// var hour       =   17;
// var minute     =   20;
// var second     =   00;

// var date = new Date(year, month, dayOfMonth, hour, minute, second);

//**********************************************
// var rule = new schedule.RecurrenceRule();

// rule.month      = 05;
// rule.dayOfMonth = 30;
// //rule.dayOfWeek = 15;
// rule.hour       = 09;
// rule.minute     = 13;
// rule.second     = 00;

// var j = schedule.scheduleJob(rule, function(){
//   console.log(j)
//   console.log('Encender ECA');

// });
//**********************************************

// var j = schedule.scheduleJob({month:03, dayOfMonth: 25, dayOfWeek: 6, hour: 16, minute: 50, second:10}, function(){
//   console.log('It is Work!!!');

// });

// Función encargada de apagar PC dentro del aula, enviando una patición HTTP
// al servidor que corre en esa máquina
function TurnOffPC(pcName) {
  // Declaración de variables
  var ipAddr;
  var control = false;
  // Tomar dirección IP correspondiente guardada en fichero "PcAulaFuturo"
  fs.readFile(PcAulaFuturo, 'utf8', function(err,data){
    var auxA = JSON.parse(data);
    for (var i = auxA.PC.length - 1; i >= 0; i--) {
      if(auxA.PC[i].pcName == pcName){
        ipAddr = auxA.PC[i].IP;
        control = true;
        break;
      };
    };

    // Si existe la PC en la lista, continuar con el proceso de apagado
    if (control){
      // Opciones de petición HTTP
      var options = {
        hostname: ipAddr, 
        port: 3001,
        method: 'GET',
        path: "/shutdownMyself"
      }; 
      // Envío de petición HTTP a servidor 
      var req = http.request(options, function(res) {
        res.setEncoding('utf8');
        res.on('data', function(result) {
          console.log(result);
        })
      });
      // Hubo error en el envío de la petición ??
      req.on('error', function(e) {
        console.log('ERROR: ' + e.message);
      });
      req.end(); // Terminar petición

      // Indicar al usuario que la PC no se encuentra en la lista
    }else{
      console.log("Error: no se encontró PC en la lista")
    };
  }); //fin fichero
}; //fin función

//Función encarcargada de crear paqute mágico y enviarlo por la red vía broadcast 
//para encendido de PC
function turnOnPc(pcName){

  //Declarar variables
  var macAddr; 
  var control = false;
  
  // Tomar dirección física correspondiente guardada en fichero "PcAulaFuturo"
  fs.readFile(PcAulaFuturo, 'utf8', function(err,data){
    var auxA = JSON.parse(data);
    for (var i = auxA.PC.length - 1; i >= 0; i--) {
      if(auxA.PC[i].pcName == pcName){
        macAddr = auxA.PC[i].macAddr;
        control = true;
        break;
      }
    };

    // Si existe la PC en la lista, continuar con el proceso de encendido
    if (control){
      var client       = dgram.createSocket('udp4'); //Crear socket UDP
      var PORT         = 9;            // Puerto destino (NIC)
      var HOST         = ipbroadCast;  // IP broadcast
      var splitmacAddr = macAddr.split(':'); 
      var HexN         = [];              
      
      // Convertir la Dir. Física de la PC a formato hexadecimal
      for (var i = splitmacAddr.length-1; i >= 0; i--) {
        HexN[i] = parseInt(splitmacAddr[i], 16);
      };

      // Objeto "Buffer" que contiene el paquete mágico 
      var MagicPacket = new Buffer([   
           0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,
        HexN[0],HexN[1],HexN[2],HexN[3],HexN[4],HexN[5],
        HexN[0],HexN[1],HexN[2],HexN[3],HexN[4],HexN[5],
        HexN[0],HexN[1],HexN[2],HexN[3],HexN[4],HexN[5],
        HexN[0],HexN[1],HexN[2],HexN[3],HexN[4],HexN[5],
        HexN[0],HexN[1],HexN[2],HexN[3],HexN[4],HexN[5],
        HexN[0],HexN[1],HexN[2],HexN[3],HexN[4],HexN[5],
        HexN[0],HexN[1],HexN[2],HexN[3],HexN[4],HexN[5],
        HexN[0],HexN[1],HexN[2],HexN[3],HexN[4],HexN[5],
        HexN[0],HexN[1],HexN[2],HexN[3],HexN[4],HexN[5],
        HexN[0],HexN[1],HexN[2],HexN[3],HexN[4],HexN[5],
        HexN[0],HexN[1],HexN[2],HexN[3],HexN[4],HexN[5],
        HexN[0],HexN[1],HexN[2],HexN[3],HexN[4],HexN[5],
        HexN[0],HexN[1],HexN[2],HexN[3],HexN[4],HexN[5],
        HexN[0],HexN[1],HexN[2],HexN[3],HexN[4],HexN[5],
        HexN[0],HexN[1],HexN[2],HexN[3],HexN[4],HexN[5],
        HexN[0],HexN[1],HexN[2],HexN[3],HexN[4],HexN[5] ]);

      // Atar socket a un puerto random y permitir el direccionamiento broadcast
      client.bind( function() { client.setBroadcast(true) } );

      // Envío de datagrama (paquete mágico) por la red, al puerto y host especificado
      client.send(MagicPacket, 0, MagicPacket.length, PORT, HOST, 

        // Una vez enviados el paquete, ejecuta función callback
        function(err, bytes) {

          // hubo error en el envío?
          if (err){  
            statusPC = "0";
            throw err
            client.close(); //Cerrar Socket/conexión
          };

          statusPC = "1";
          console.log('Envío de paquetes UDP a ' + HOST +':'+ PORT);
          console.log("encendiendo "+pcName);
          client.close();   //Cerrar conexión/conexión
        }); 

      // Si no existe PC en la lista, retorno de función, sin envío de datagramas 
    }else{
      statusPC = "2";
      console.log("Error: no se encontró PC en la lista")
    }; 

  }); // fin fichero
}; //fin de función


function sendCmdOnToUcProgram(muralECA){

  console.log("");
  
  var module, projectorName, pcName, statusProjector, puerto;
  var auxData;
  var auxConvertHexOn, auxConvertHexOff;
  var auxConvertHexOnAck, auxConvertHexOffAck;
  var convertHexCmdFormatOn, convertHexCmdFormatOff;
  var convertHexCmdFormatOnAck, convertHexCmdFormatOffAck;
  var statusPCarray = [];
  var response = "";
  var currentStatus = "";

  var url = "";
  var auxConvertHexOn     = "";
  var auxConvertHexOnAck  = "";
  var auxConvertHexOff    = "";
  var auxConvertHexOffAck = "";

  var waitTime = 1000*10;  //1000 = 1 seg

  responseMicro2 = false;


  var dataSatus   = muralECA.split('_');
  module          = dataSatus[0];
  projectorName   = dataSatus[1];
  pcName          = dataSatus[2];
  puerto          = dataSatus[3];

  console.log("*** Encender módulo "+ module +" ***");
  console.log("");
  console.log("Value:      ",muralECA);
  console.log("Modulo:     ",module);
  console.log("Proyector:  ",projectorName);
  console.log("PC:         ",pcName);
  console.log("Puerto:     ",puerto);
 
  fs.readFile(file2, 'utf8', function(err,data){
    auxData = JSON.parse(data);

    for (var j = auxData.PROJECTORS.length - 1; j >= 0; j--) {
      if (auxData.PROJECTORS[j].proyectorName == projectorName) {
        convertHexCmdFormatOn     = auxData.PROJECTORS[j].onCmd.split(",");
        convertHexCmdFormatOnAck  = auxData.PROJECTORS[j].onAckCmd.split(",");
        convertHexCmdFormatOff    = auxData.PROJECTORS[j].offCmd.split(",");
        convertHexCmdFormatOffAck = auxData.PROJECTORS[j].offAckCmd.split(",");
        baudRate                  = auxData.PROJECTORS[j].baudRate;
      };
    };

    console.log("");

    for (var k = 0; k < convertHexCmdFormatOn.length; k++)
      auxConvertHexOn += convertHexCmdFormatOn[k];
    for (var k = 0; k < convertHexCmdFormatOnAck.length ; k++)
      auxConvertHexOnAck += convertHexCmdFormatOnAck[k];
    url = "/puerto"+puerto+"?cmd="+auxConvertHexOn+"&baudRate="+baudRate+"+&Ack="+auxConvertHexOnAck+"*";
    console.log(""+module+"OnCmd:    ",auxConvertHexOn);
    console.log(""+module+"OnCmdAck: ",auxConvertHexOnAck);
    console.log(""+module+"Url:      ",url);

    console.log("");

    var options = {
      hostname: ipTiva,
      port: 80,
      method: 'GET',
      path: url
    };

    var req = http.request(options, function(res) {
      res.setEncoding('utf8');
      res.on('data', function(result) {
        console.log(""+module+"Response: ",result);

        responseMicro2 = true;

        //Formato de respuesta = [modulo,proyector,pc,estadoActual,puerto,respuestaMicro, envíoPaquetesUDP]
        //console.log(result);
        if (result != '1'){
          console.log("Error de encendido de proyector");
          response = module+"_"+projectorName+"_"+pcName+"_"+puerto+"_"+result+"_"+statusPC;
          req.end("ok");
          
        }else{
          //Encender PC:  envío de paquetes UDP por medio del protocolo Wake On Lan
          turnOnPc(pcName);
          console.log("Success: Proyector encendido");
          setTimeout(function(){ 
            response = module+"_"+projectorName+"_"+pcName+"_"+puerto+"_"+result+"_"+statusPC;
            req.end("ok");
          },100); 
        };

      })
    });
  
    //Si no está conectado a la red el uC (dispositivo con puertos RS232)
    //Esperamos a los más 10 segundos y regresamos respuesta al cliente
    //Indicando que el dispositivo está fuera de la red:
    req.on('error', function(e) {
      console.log('ERROR: ' + e.message);
      response = module+"_"+projectorName+"_"+pcName+"_"+puerto+"_3_"+statusPC;
      req.end("ok");
    });

    setTimeout(function(){ 
      if (!responseMicro2) {
        console.log('Error: TimeOut 10 s!')

        //Prueba - Borrar
        //********************************
        //turnOnPc(pcName);
        //setTimeout(function(){ 
        //  response = module+"_"+projectorName+"_"+pcName+"_"+puerto+"_3_"+statusPC;
        //  req.end("ok");
        //},100); 
        //********************************

        response = module+"_"+projectorName+"_"+pcName+"_"+puerto+"_3_"+statusPC;
        req.end("ok");
      };

    },waitTime); 

    req.end("ok");
  });


};


function sendCmdToSartFile(dirIP, fileName){
  // Indicar opciones de la peticion
  var options = {
    hostname: dirIP,  //direccion IP de la PC
    port: 3001,       //Puerto donde recibe conexiones
    path: "/start?data=\\\\"+hostNameServer+"\\programsToShare3\\"+fileName
  }; 
  var req = http.request(options, 
    function(res) {
      res.setEncoding('utf8');
      //Mensaje de servidor esclavo
      res.on('data', function(result) {
          console.log(result);
      });
      //Hubo error en el envío de la peticin ??
      req.on('error', function(e) {
        console.log('ERROR: ' + e.message);
      });

    });  
  req.end(); //Terminar petición
}; //Cierre de función



